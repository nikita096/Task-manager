{"remainingRequest":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/babel-loader/lib/index.js!/Users/nikitabugaev/Desktop/t-m/task-manger/src/store/record.js","dependencies":[{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/src/store/record.js","mtime":1593895971461},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/nikitabugaev/Desktop/t-m/task-manger/src/store/record.js"],"names":["firebase","database","state","record","getters","s","mutations","setRecord","clearRecord","actions","creatRecord","dispatch","commit","uid","ref","push","fetchRecords","once","val","records","Object","keys","map","key","id","fetchRecordById","child","updateRecord","description","status","date","update","deleteRecordById","remove"],"mappings":"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","sourcesContent":["import firebase, {database} from 'firebase/app'\n\nexport default {\n    state: {\n        record: {}\n      },\n      getters: {\n        record : s => s.record \n      },\n      mutations: {\n        setRecord(state, record){\n          state.record = record\n        },\n        clearRecord(state){\n            state.record = {} \n        }\n      },\n    actions: {\n        async creatRecord({dispatch, commit}, record){\n            try {\n                const uid = await dispatch('getUid')\n                await firebase.database().ref(`/users/${uid}/records`).push(record)\n            } catch (error) {\n                commit('setError',error )\n                throw error\n            }\n        },\n        async fetchRecords({dispatch, commit}){\n            try {\n                const uid = await dispatch('getUid')\n                const records =  (await firebase.database().ref(`/users/${uid}/records`).once('value')).val() || {}\n                return Object.keys(records).map(key => ({...records[key], id:key}))\n            } catch (error) {\n                commit('setError',error )\n                throw error\n            }\n        },\n        async fetchRecordById({dispatch, commit}, id){\n            try {\n                const uid  = await dispatch ('getUid')\n                const record =  (await firebase.database().ref(`/users/${uid}/records`).child(id).once('value')).val() || {}\n                commit('setRecord', record)\n            } catch (error) {\n                commit('setError', error)\n                throw error\n            }\n        },\n        async updateRecord({dispatch, commit, getters}, {description, status, id, date}){\n            try {\n                const uid  = await dispatch ('getUid')\n                await firebase.database().ref(`/users/${uid}/records`).child(id).update({description,status,date}) \n                commit('setRecord', {...getters.record, description, status, id, date}) \n            } catch (error) {\n                commit('setError', error)\n                throw error\n            }\n        },\n        async deleteRecordById({dispatch},id){\n            const uid  = await dispatch ('getUid')\n            await firebase.database().ref(`/users/${uid}/records`).child(id).remove()   \n\n        }\n    }\n}"]}]}