{"remainingRequest":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikitabugaev/Desktop/t-m/task-manger/src/views/Registration.vue?vue&type=template&id=6106551a&","dependencies":[{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/src/views/Registration.vue","mtime":1594054192839},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}