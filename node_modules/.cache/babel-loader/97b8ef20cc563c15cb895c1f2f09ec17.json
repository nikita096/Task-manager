{"remainingRequest":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/babel-loader/lib/index.js!/Users/nikitabugaev/Desktop/t-m/task-manger/src/store/record.js","dependencies":[{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/src/store/record.js","mtime":1593700448612},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/nikitabugaev/Desktop/t-m/task-manger/src/store/record.js"],"names":["firebase","database","actions","creatRecord","record","dispatch","commit","uid","ref","push","fetchRecords","once","val","records","Object","keys","map","key","id","fetchRecordById","child","updateRecord","description","status","date","update","deleteRecordById","remove"],"mappings":"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","sourcesContent":["import firebase, {database} from 'firebase/app'\n\nexport default {\n    actions: {\n        async creatRecord({dispatch, commit}, record){\n            try {\n                const uid = await dispatch('getUid')\n                await firebase.database().ref(`/users/${uid}/records`).push(record)\n            } catch (error) {\n                commit('setError',error )\n                throw error\n            }\n        },\n        async fetchRecords({dispatch, commit}){\n            try {\n                const uid = await dispatch('getUid')\n                const records =  (await firebase.database().ref(`/users/${uid}/records`).once('value')).val() || {}\n                return Object.keys(records).map(key => ({...records[key], id:key}))\n            } catch (error) {\n                commit('setError',error )\n                throw error\n            }\n        },\n        async fetchRecordById({dispatch, commit}, id){\n            try {\n                const uid  = await dispatch ('getUid')\n                const record =  (await firebase.database().ref(`/users/${uid}/records`).child(id).once('value')).val() || {}\n                return {...record,id}\n            } catch (error) {\n                commit('setError', error)\n                throw error\n            }\n        },\n        async updateRecord({dispatch, commit}, {description, status, id, date}){\n            try {\n                const uid  = await dispatch ('getUid')\n                await firebase.database().ref(`/users/${uid}/records`).child(id).update({description,status,date})    \n            } catch (error) {\n                commit('setError', error)\n                throw error\n            }\n        },\n        async deleteRecordById({dispatch},id){\n            const uid  = await dispatch ('getUid')\n            await firebase.database().ref(`/users/${uid}/records`).child(id).remove()   \n\n        }\n    }\n}"]}]}