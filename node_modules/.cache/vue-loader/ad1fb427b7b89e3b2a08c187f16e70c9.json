{"remainingRequest":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikitabugaev/Desktop/t-m/task-manger/src/views/Home.vue?vue&type=style&index=0&id=fae5bece&scoped=true&lang=css&","dependencies":[{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/src/views/Home.vue","mtime":1593527860813},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitabugaev/Desktop/t-m/task-manger/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYXBwLWNvbnRlbnQgewogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwp9Cg=="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <main class=\"app-content\">\n    <div class=\"app-page\">        \n        <div class=\"page-title\">\n            <h3>Добавить задачу</h3>\n        </div>\n          <section>\n                <div class=\"row\">\n                    <div class=\"col s12 m6\">\n                        <div>\n                            <form @submit.prevent=\"submitHandler\">\n                                <div class=\"input-field\">\n                                <input\n                                    id=\"name\"\n                                    type=\"text\"\n                                    v-model=\" $v.title.$model\"\n                                    :class=\"{invalid: ($v.title.$dirty && !$v.title.minLength) || ($v.title.$dirty && !$v.title.required)}\"\n                                >\n                                <label for=\"name\">Название</label>\n                                <span class=\"helper-text invalid\"\n                                    v-if=\"$v.title.$dirty && !$v.title.minLength\"\n                                >\n                                    Минимальное кол-во символов: {{$v.title.$params.minLength.min}} \n                                </span>\n                                <span class=\"helper-text invalid\"\n                                    v-if=\"$v.title.$dirty && !$v.title.required\"\n                                >\n                                    Введите название\n                                </span>\n                                </div>\n\n                                <div class=\"chips chips-autocomplete\" ref=\"chips\"></div>\n                                <label for=\"date\">Дедлайн</label>\n                                <input  id=\"date\" type=\"text\" class=\"datepicker\" ref=\"datepicker\">\n\n                                <div class=\"input-field\">\n                                <textarea id=\"textarea1\" class=\"materialize-textarea\"\n                                    v-model=\"$v.description.$model\"\n                                    :class=\"{invalid: ($v.description.$dirty && !$v.description.minLength)  || ($v.description.$dirty && !$v.description.required)}\"\n                                ></textarea>\n                                <label for=\"textarea1\">Введите описание задачи</label>\n                                <span class=\"helper-text right\"\n                                > \n                                    Кол-во символов: {{description.length}} /{{$v.description.$params.maxLength.max}} \n                                </span>\n                                <span class=\"helper-text invalid\"\n                                    v-if=\"($v.description.$dirty && !$v.description.minLength)\"\n                                >Минимальная величина :  {{$v.description.$params.minLength.min}} \n                                </span>\n                                <span class=\"helper-text invalid\"\n                                    v-if=\"($v.description.$dirty && !$v.description.maxLength)\"\n                                >Максимальное кол-во символов:  {{$v.description.$params.maxLength.max}} \n                                </span>\n                                <span class=\"helper-text invalid\"\n                                    v-if=\"$v.description.$dirty && !$v.description.required\"\n                                > Введите описание задачи\n                                </span>\n                                \n                                </div>\n\n                                <button class=\"btn waves-effect waves-light\" type=\"submit\">\n                                Создать\n                                <i class=\"material-icons right\">send</i>\n                                </button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </section>\n    </div>\n  </main> \n</template>\n\n<script>\nimport {email, required, minLength, maxLength} from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'Home',\n  data: ()=>({\n      title: '',\n      description: '',\n      chips: null,\n      date: null\n      \n\n  }),\n  validations: {\n      title: {required, minLength:minLength(3)},\n      description: {minLength: minLength(3), maxLength: maxLength(2048),required},\n      chips: {required}\n  },\n  methods: {\n     async submitHandler(){\n            if (this.$v.$invalid){\n                this.$v.$touch()\n                return\n            }\n            const formData = {\n            status: 'active',\n            title: this.title,\n            description: this.description,\n            date: this.date.date.toJSON(),\n            tags: this.chips.chipsData\n            }\n            \n            await this.$store.dispatch('creatRecord', formData)\n            this.$message('Запись успешно создана')\n            this.$v.$reset()\n            this.title = ''\n            this.description = ''\n            M.Chips.getInstance(this.$refs.chips).deleteChip()\n        }\n  },\n  mounted(){\n      this.chips = M.Chips.init(this.$refs.chips, {\n          placeholder: 'Task tags',\n          limit: 3\n      });\n          this.date = M.Datepicker.init(this.$refs.datepicker, {\n          format: 'dd.mm.yyyy',\n          defaultDate: new Date(),\n          setDefaultDate: true\n      })               \n      \n  }\n}\n</script>\n<style scoped>\n    .app-content {\n        display: flex;\n        align-content: center;\n        justify-content: center;\n    }\n</style>"]}]}